// This file was generated by counterfeiter
package retryhttpfakes

import (
	"net/http"
	"sync"

	"github.com/concourse/retryhttp"
)

type FakeHijackableClient struct {
	DoStub        func(req *http.Request) (*http.Response, retryhttp.HijackCloser, error)
	doMutex       sync.RWMutex
	doArgsForCall []struct {
		req *http.Request
	}
	doReturns struct {
		result1 *http.Response
		result2 retryhttp.HijackCloser
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHijackableClient) Do(req *http.Request) (*http.Response, retryhttp.HijackCloser, error) {
	fake.doMutex.Lock()
	fake.doArgsForCall = append(fake.doArgsForCall, struct {
		req *http.Request
	}{req})
	fake.recordInvocation("Do", []interface{}{req})
	fake.doMutex.Unlock()
	if fake.DoStub != nil {
		return fake.DoStub(req)
	} else {
		return fake.doReturns.result1, fake.doReturns.result2, fake.doReturns.result3
	}
}

func (fake *FakeHijackableClient) DoCallCount() int {
	fake.doMutex.RLock()
	defer fake.doMutex.RUnlock()
	return len(fake.doArgsForCall)
}

func (fake *FakeHijackableClient) DoArgsForCall(i int) *http.Request {
	fake.doMutex.RLock()
	defer fake.doMutex.RUnlock()
	return fake.doArgsForCall[i].req
}

func (fake *FakeHijackableClient) DoReturns(result1 *http.Response, result2 retryhttp.HijackCloser, result3 error) {
	fake.DoStub = nil
	fake.doReturns = struct {
		result1 *http.Response
		result2 retryhttp.HijackCloser
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeHijackableClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.doMutex.RLock()
	defer fake.doMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeHijackableClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ retryhttp.HijackableClient = new(FakeHijackableClient)
