// This file was generated by counterfeiter
package retryhttpfakes

import (
	"sync"

	"github.com/concourse/retryhttp"
)

type FakeBackOffFactory struct {
	NewBackOffStub        func() retryhttp.BackOff
	newBackOffMutex       sync.RWMutex
	newBackOffArgsForCall []struct{}
	newBackOffReturns     struct {
		result1 retryhttp.BackOff
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBackOffFactory) NewBackOff() retryhttp.BackOff {
	fake.newBackOffMutex.Lock()
	fake.newBackOffArgsForCall = append(fake.newBackOffArgsForCall, struct{}{})
	fake.recordInvocation("NewBackOff", []interface{}{})
	fake.newBackOffMutex.Unlock()
	if fake.NewBackOffStub != nil {
		return fake.NewBackOffStub()
	} else {
		return fake.newBackOffReturns.result1
	}
}

func (fake *FakeBackOffFactory) NewBackOffCallCount() int {
	fake.newBackOffMutex.RLock()
	defer fake.newBackOffMutex.RUnlock()
	return len(fake.newBackOffArgsForCall)
}

func (fake *FakeBackOffFactory) NewBackOffReturns(result1 retryhttp.BackOff) {
	fake.NewBackOffStub = nil
	fake.newBackOffReturns = struct {
		result1 retryhttp.BackOff
	}{result1}
}

func (fake *FakeBackOffFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newBackOffMutex.RLock()
	defer fake.newBackOffMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeBackOffFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ retryhttp.BackOffFactory = new(FakeBackOffFactory)
