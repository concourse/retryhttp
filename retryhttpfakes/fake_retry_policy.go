// This file was generated by counterfeiter
package retryhttpfakes

import (
	"sync"
	"time"

	"github.com/concourse/retryhttp"
)

type FakeRetryPolicy struct {
	DelayForStub        func(uint) (time.Duration, bool)
	delayForMutex       sync.RWMutex
	delayForArgsForCall []struct {
		arg1 uint
	}
	delayForReturns struct {
		result1 time.Duration
		result2 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRetryPolicy) DelayFor(arg1 uint) (time.Duration, bool) {
	fake.delayForMutex.Lock()
	fake.delayForArgsForCall = append(fake.delayForArgsForCall, struct {
		arg1 uint
	}{arg1})
	fake.recordInvocation("DelayFor", []interface{}{arg1})
	fake.delayForMutex.Unlock()
	if fake.DelayForStub != nil {
		return fake.DelayForStub(arg1)
	} else {
		return fake.delayForReturns.result1, fake.delayForReturns.result2
	}
}

func (fake *FakeRetryPolicy) DelayForCallCount() int {
	fake.delayForMutex.RLock()
	defer fake.delayForMutex.RUnlock()
	return len(fake.delayForArgsForCall)
}

func (fake *FakeRetryPolicy) DelayForArgsForCall(i int) uint {
	fake.delayForMutex.RLock()
	defer fake.delayForMutex.RUnlock()
	return fake.delayForArgsForCall[i].arg1
}

func (fake *FakeRetryPolicy) DelayForReturns(result1 time.Duration, result2 bool) {
	fake.DelayForStub = nil
	fake.delayForReturns = struct {
		result1 time.Duration
		result2 bool
	}{result1, result2}
}

func (fake *FakeRetryPolicy) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.delayForMutex.RLock()
	defer fake.delayForMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeRetryPolicy) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ retryhttp.RetryPolicy = new(FakeRetryPolicy)
